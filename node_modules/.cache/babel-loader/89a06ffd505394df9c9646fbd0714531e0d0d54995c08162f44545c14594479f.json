{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:5000/api';\nclass UserService {\n  async createUser(userData) {\n    try {\n      const response = await axios.post(`${API_URL}/signup`, userData);\n      return response.data;\n    } catch (error) {\n      var _error$response, _error$response$data;\n      throw new Error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Failed to create user');\n    }\n  }\n  async login(email, password) {\n    try {\n      const response = await axios.post(`${API_URL}/login`, {\n        email,\n        password\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      throw new Error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Invalid credentials');\n    }\n  }\n}\nexport const userService = new UserService();","map":{"version":3,"names":["axios","API_URL","UserService","createUser","userData","response","post","data","error","_error$response","_error$response$data","Error","message","login","email","password","_error$response2","_error$response2$data","userService"],"sources":["C:/Users/chand/KodJobs/src/services/userService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:5000/api';\r\n\r\nclass UserService {\r\n  async createUser(userData) {\r\n    try {\r\n      const response = await axios.post(`${API_URL}/signup`, userData);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(error.response?.data?.message || 'Failed to create user');\r\n    }\r\n  }\r\n\r\n  async login(email, password) {\r\n    try {\r\n      const response = await axios.post(`${API_URL}/login`, { email, password });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(error.response?.data?.message || 'Invalid credentials');\r\n    }\r\n  }\r\n}\r\n\r\nexport const userService = new UserService(); "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,2BAA2B;AAE3C,MAAMC,WAAW,CAAC;EAChB,MAAMC,UAAUA,CAACC,QAAQ,EAAE;IACzB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAML,KAAK,CAACM,IAAI,CAAC,GAAGL,OAAO,SAAS,EAAEG,QAAQ,CAAC;MAChE,OAAOC,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MAAA,IAAAC,eAAA,EAAAC,oBAAA;MACd,MAAM,IAAIC,KAAK,CAAC,EAAAF,eAAA,GAAAD,KAAK,CAACH,QAAQ,cAAAI,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBF,IAAI,cAAAG,oBAAA,uBAApBA,oBAAA,CAAsBE,OAAO,KAAI,uBAAuB,CAAC;IAC3E;EACF;EAEA,MAAMC,KAAKA,CAACC,KAAK,EAAEC,QAAQ,EAAE;IAC3B,IAAI;MACF,MAAMV,QAAQ,GAAG,MAAML,KAAK,CAACM,IAAI,CAAC,GAAGL,OAAO,QAAQ,EAAE;QAAEa,KAAK;QAAEC;MAAS,CAAC,CAAC;MAC1E,OAAOV,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MAAA,IAAAQ,gBAAA,EAAAC,qBAAA;MACd,MAAM,IAAIN,KAAK,CAAC,EAAAK,gBAAA,GAAAR,KAAK,CAACH,QAAQ,cAAAW,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBT,IAAI,cAAAU,qBAAA,uBAApBA,qBAAA,CAAsBL,OAAO,KAAI,qBAAqB,CAAC;IACzE;EACF;AACF;AAEA,OAAO,MAAMM,WAAW,GAAG,IAAIhB,WAAW,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}