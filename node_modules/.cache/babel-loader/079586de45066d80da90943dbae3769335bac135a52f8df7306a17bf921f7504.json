{"ast":null,"code":"import fs from 'fs';\nimport path from 'path';\nimport bcrypt from 'bcryptjs'; // You'll need to install this: npm install bcryptjs\n\nconst USERS_FILE_PATH = path.join(__dirname, '../data/users.json');\nclass UserService {\n  constructor() {\n    this.users = this.loadUsers();\n  }\n  loadUsers() {\n    try {\n      const data = fs.readFileSync(USERS_FILE_PATH, 'utf8');\n      return JSON.parse(data).users;\n    } catch (error) {\n      console.error('Error loading users:', error);\n      return [];\n    }\n  }\n  saveUsers() {\n    try {\n      fs.writeFileSync(USERS_FILE_PATH, JSON.stringify({\n        users: this.users\n      }, null, 2));\n      return true;\n    } catch (error) {\n      console.error('Error saving users:', error);\n      return false;\n    }\n  }\n  async createUser(userData) {\n    try {\n      // Check if user already exists\n      if (this.users.some(user => user.email === userData.email)) {\n        throw new Error('User with this email already exists');\n      }\n\n      // Hash password\n      const hashedPassword = await bcrypt.hash(userData.password, 10);\n\n      // Create new user\n      const newUser = {\n        id: (this.users.length + 1).toString(),\n        name: userData.name,\n        email: userData.email,\n        password: hashedPassword,\n        createdAt: new Date().toISOString()\n      };\n\n      // Add to users array\n      this.users.push(newUser);\n\n      // Save to file\n      if (this.saveUsers()) {\n        // Return user without password\n        const {\n          password,\n          ...userWithoutPassword\n        } = newUser;\n        return userWithoutPassword;\n      } else {\n        throw new Error('Failed to save user');\n      }\n    } catch (error) {\n      throw error;\n    }\n  }\n  async validateUser(email, password) {\n    try {\n      const user = this.users.find(u => u.email === email);\n      if (!user) {\n        return null;\n      }\n      const isValid = await bcrypt.compare(password, user.password);\n      if (!isValid) {\n        return null;\n      }\n\n      // Return user without password\n      const {\n        password: _,\n        ...userWithoutPassword\n      } = user;\n      return userWithoutPassword;\n    } catch (error) {\n      throw error;\n    }\n  }\n  getUserByEmail(email) {\n    const user = this.users.find(u => u.email === email);\n    if (!user) return null;\n\n    // Return user without password\n    const {\n      password,\n      ...userWithoutPassword\n    } = user;\n    return userWithoutPassword;\n  }\n  updateUser(userId, updateData) {\n    try {\n      const userIndex = this.users.findIndex(u => u.id === userId);\n      if (userIndex === -1) {\n        throw new Error('User not found');\n      }\n\n      // Don't allow updating certain fields\n      const {\n        id,\n        password,\n        createdAt,\n        ...allowedUpdates\n      } = updateData;\n\n      // Update user\n      this.users[userIndex] = {\n        ...this.users[userIndex],\n        ...allowedUpdates\n      };\n\n      // Save changes\n      if (this.saveUsers()) {\n        // Return updated user without password\n        const {\n          password,\n          ...userWithoutPassword\n        } = this.users[userIndex];\n        return userWithoutPassword;\n      } else {\n        throw new Error('Failed to update user');\n      }\n    } catch (error) {\n      throw error;\n    }\n  }\n}\nexport const userService = new UserService();","map":{"version":3,"names":["fs","path","bcrypt","USERS_FILE_PATH","join","__dirname","UserService","constructor","users","loadUsers","data","readFileSync","JSON","parse","error","console","saveUsers","writeFileSync","stringify","createUser","userData","some","user","email","Error","hashedPassword","hash","password","newUser","id","length","toString","name","createdAt","Date","toISOString","push","userWithoutPassword","validateUser","find","u","isValid","compare","_","getUserByEmail","updateUser","userId","updateData","userIndex","findIndex","allowedUpdates","userService"],"sources":["C:/Users/chand/KodJobs/src/services/userService.js"],"sourcesContent":["import fs from 'fs';\r\nimport path from 'path';\r\nimport bcrypt from 'bcryptjs'; // You'll need to install this: npm install bcryptjs\r\n\r\nconst USERS_FILE_PATH = path.join(__dirname, '../data/users.json');\r\n\r\nclass UserService {\r\n  constructor() {\r\n    this.users = this.loadUsers();\r\n  }\r\n\r\n  loadUsers() {\r\n    try {\r\n      const data = fs.readFileSync(USERS_FILE_PATH, 'utf8');\r\n      return JSON.parse(data).users;\r\n    } catch (error) {\r\n      console.error('Error loading users:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  saveUsers() {\r\n    try {\r\n      fs.writeFileSync(USERS_FILE_PATH, JSON.stringify({ users: this.users }, null, 2));\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error saving users:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  async createUser(userData) {\r\n    try {\r\n      // Check if user already exists\r\n      if (this.users.some(user => user.email === userData.email)) {\r\n        throw new Error('User with this email already exists');\r\n      }\r\n\r\n      // Hash password\r\n      const hashedPassword = await bcrypt.hash(userData.password, 10);\r\n\r\n      // Create new user\r\n      const newUser = {\r\n        id: (this.users.length + 1).toString(),\r\n        name: userData.name,\r\n        email: userData.email,\r\n        password: hashedPassword,\r\n        createdAt: new Date().toISOString()\r\n      };\r\n\r\n      // Add to users array\r\n      this.users.push(newUser);\r\n\r\n      // Save to file\r\n      if (this.saveUsers()) {\r\n        // Return user without password\r\n        const { password, ...userWithoutPassword } = newUser;\r\n        return userWithoutPassword;\r\n      } else {\r\n        throw new Error('Failed to save user');\r\n      }\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async validateUser(email, password) {\r\n    try {\r\n      const user = this.users.find(u => u.email === email);\r\n      if (!user) {\r\n        return null;\r\n      }\r\n\r\n      const isValid = await bcrypt.compare(password, user.password);\r\n      if (!isValid) {\r\n        return null;\r\n      }\r\n\r\n      // Return user without password\r\n      const { password: _, ...userWithoutPassword } = user;\r\n      return userWithoutPassword;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  getUserByEmail(email) {\r\n    const user = this.users.find(u => u.email === email);\r\n    if (!user) return null;\r\n    \r\n    // Return user without password\r\n    const { password, ...userWithoutPassword } = user;\r\n    return userWithoutPassword;\r\n  }\r\n\r\n  updateUser(userId, updateData) {\r\n    try {\r\n      const userIndex = this.users.findIndex(u => u.id === userId);\r\n      if (userIndex === -1) {\r\n        throw new Error('User not found');\r\n      }\r\n\r\n      // Don't allow updating certain fields\r\n      const { id, password, createdAt, ...allowedUpdates } = updateData;\r\n\r\n      // Update user\r\n      this.users[userIndex] = {\r\n        ...this.users[userIndex],\r\n        ...allowedUpdates\r\n      };\r\n\r\n      // Save changes\r\n      if (this.saveUsers()) {\r\n        // Return updated user without password\r\n        const { password, ...userWithoutPassword } = this.users[userIndex];\r\n        return userWithoutPassword;\r\n      } else {\r\n        throw new Error('Failed to update user');\r\n      }\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\nexport const userService = new UserService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}